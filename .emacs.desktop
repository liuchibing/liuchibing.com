;; -*- mode: emacs-lisp; coding: emacs-mule; -*-
;; --------------------------------------------------------------------------
;; Desktop File for Emacs
;; --------------------------------------------------------------------------
;; Created Wed Apr 17 10:32:34 2019
;; Desktop file format version 208
;; Emacs version 25.2.2

;; Global section:
(setq desktop-saved-frameset [frameset 1 (23734 36930 490273 3000) (desktop . "208") "liuchibing@localhost" nil nil ((((font-backend xft x) (font . "-PfEd-DejaVu Sans Mono-normal-normal-normal-*-15-*-*-*-m-0-iso10646-1") (font-parameter . "Monospace 11") (border-width . 0) (internal-border-width . 0) (right-divider-width . 0) (bottom-divider-width . 0) (vertical-scroll-bars) (horizontal-scroll-bars) (foreground-color . "#eaeaea") (background-color . "#000000") (mouse-color . "black") (border-color . "#424242") (screen-gamma) (line-spacing) (left-fringe . 8) (right-fringe . 8) (scroll-bar-foreground) (scroll-bar-background) (menu-bar-lines . 0) (tool-bar-lines . 0) (title) (wait-for-wm . t) (tool-bar-position . top) (icon-type . t) (auto-raise) (auto-lower) (cursor-type . box) (scroll-bar-width . 0) (scroll-bar-height . 0) (alpha) (fullscreen) (display-type . color) (background-mode . dark) (cursor-color . "#d54e53") (sticky) (environment) (frameset--id . "F185-7CD5-AAFD-7A0A") (frameset--mini t . t) (modeline . t) (minibuffer . t) (unsplittable) (icon-name) (visibility . t) (display . ":0.0") (explicit-name) (height . 36) (width . 80) (left . 0) (top . 31)) ((min-height . 4) (min-width . 10) (min-height-ignore . 3) (min-width-ignore . 4) (min-height-safe . 1) (min-width-safe . 2) (min-pixel-height . 72) (min-pixel-width . 90) (min-pixel-height-ignore . 54) (min-pixel-width-ignore . 36) (min-pixel-height-safe . 18) (min-pixel-width-safe . 18)) leaf (pixel-width . 736) (pixel-height . 630) (total-width . 82) (total-height . 35) (normal-height . 1.0) (normal-width . 1.0) (buffer "_config.yml" (selected . t) (hscroll . 0) (fringes 8 8 nil) (margins nil) (scroll-bars nil 0 t nil 0 t) (vscroll . 0) (dedicated) (point . 234) (start . 1))))])
(setq comint-input-ring nil)
(setq compile-history nil)
(setq desktop-missing-file-warning nil)
(setq dired-regexp-history nil)
(setq extended-command-history '("desktop-remove" "desktop-clear"))
(setq face-name-history nil)
(setq file-name-history '("/home/liuchibing/code/liuchibing.com/" "/home/liuchibing/code/liuchibing.ml/_includes/head.html" "/home/liuchibing/code/liuchibing.ml/_config.yml" "/home/liuchibing/code/liuchibing.com/_config.yml" "~/.emacs.d/custom.el" "~/code/soundpicture/soundpicture.py" "/home/liuchibing/code/soundpicture/README.md" "~/.emacs.d/custom.el" "~/code/soundpicture/soundpicture.py" "~/.emacs.d/custom.el" "~/code/soundpicture/soundpicture.py" "~/.emacs.d/custom.el" "~/code/soundpicture/soundpicture.py" "/home/liuchibing/code/python-field/field.py" "~/.emacs.d/custom.el" "~/code/soundpicture/soundpicture.py" "~/.emacs.d/custom.el" "~/code/soundpicture/soundpicture.py" "~/.emacs.d/custom.el" "~/code/soundpicture/soundpicture.py" "~/.emacs.d/custom.el" "~/code/soundpicture/soundpicture.py" "~/.emacs.d/org-clock-save.el" "/home/liuchibing/code/soundpicture/soundpicture.py" "~/.emacs.d/custom.el" "~/code/tensorflow/learn_ml.org" "~/.emacs.d/org-clock-save.el" "/home/liuchibing/code/tensorflow/basic_classification.py" "~/.emacs.d/custom.el" "~/code/tensorflow/learn_ml.org" "~/code/spider/spider/spiders/liuchibing.py" "~/.emacs.d/org-clock-save.el" "~/.emacs.d/custom.el" "~/code/tensorflow/learn_ml.org" "~/code/spider/spider/spiders/liuchibing.py" "~/.emacs.d/org-clock-save.el" "~/code/spider/spider/spiders/liuchibing.py" "~/.emacs.d/custom.el" "~/code/tensorflow/learn_ml.org" "~/code/tensorflow/silly_max.py" "~/.emacs.d/org-clock-save.el" "~/.emacs.d/custom.el" "~/code/tensorflow/learn_ml.org" "~/code/tensorflow/silly_max.py" "~/.emacs.d/org-clock-save.el" "~/code/tensorflow/silly_max.py" "~/.emacs.d/custom.el" "~/code/tensorflow/learn_ml.org" "~/code/tensorflow/silly_xor.py" "~/.emacs.d/org-clock-save.el" "/home/liuchibing/code/tensorflow/silly_xor.py" "~/.emacs.d/custom.el" "~/code/tensorflow/learn_ml.org" "~/.emacs.d/org-clock-save.el" "~/.emacs.d/custom.el" "~/code/tensorflow/learn_ml.org" "~/.emacs.d/org-clock-save.el" "~/.emacs.d/custom.el" "~/code/tensorflow/learn_ml.org" "~/.emacs.d/org-clock-save.el" "/home/liuchibing/code/tensorflow/learn_ml.org" "~/.emacs.d/custom.el" "~/.emacs.d/org-clock-save.el" "~/code/python-field/field.py" "/home/liuchibing/code/python-field/" "~/.emacs.d/custom.el" "~/org/hello.org" "~/org/learning.org" "~/.emacs.d/org-clock-save.el" "~/.emacs.d/custom.el" "~/org/learning.org" "~/org/hello.org" "~/code/tensorflow/basic_classification.py" "~/code/tensorflow/silly_xor.py" "~/.emacs.d/org-clock-save.el" "/home/liuchibing/tf-venv/lib/python3.5/site-packages/tensorflow/python/keras/engine/network.py" "~/tf-venv/lib/python3.5/site-packages/matplotlib/mpl-data/matplotlibrc" "~/.emacs.d/custom.el" "~/org/learning.org" "~/org/hello.org" "~/code/tensorflow/basic_classification.py" "~/code/tensorflow/silly_xor.py" "~/.emacs.d/org-clock-save.el" "~/code/tensorflow/silly_xor.py" "~/.emacs.d/custom.el" "~/org/learning.org" "~/org/hello.org" "~/code/tensorflow/basic_classification.py" "~/.emacs.d/org-clock-save.el" "/home/liuchibing/tf-venv/lib/python3.5/site-packages/matplotlib/mpl-data/matplotlibrc" "~/.emacs.d/custom.el" "~/org/learning.org" "~/org/hello.org" "~/.emacs.d/org-clock-save.el" "~/.emacs.d/custom.el" "~/org/learning.org" "~/org/hello.org" "~/.emacs.d/org-clock-save.el" "~/code/python-field/field.py" "~/.emacs.d/lisp/init-org.el"))
(setq grep-find-history nil)
(setq grep-history nil)
(setq ido-buffer-history nil)
(setq ido-last-directory-list nil)
(setq ido-work-directory-list nil)
(setq ido-work-file-list nil)
(setq ivy-history '("head.html" "_config.yml" "_config.yml —£À liuchibing.ml" "_config.yml —£À liuchibing.com" "README.md" "soundpicture.py" "README.md" "soundpicture.py" "README.md" "soundpicture.py" "README.md" "soundpicture.py" "README.md" "soundpicture.py" "silly_xor.py" "basic_classification.py" "silly_xor.py" "ba" "nil" "/home/liuchibing/tf-venv/lib/python3.5/site-packages/matplotlib/mpl-data/matplotlibrc" "silly_xor.py" "basic_classification.py" "/home/liuchibing/tf-venv/lib/python3.5/site-packages/matplotlib/mpl-data/matplotlibrc" "hello.org" "learning.org" "hello.org" "learning.org" "hello.org" "learning.org" "I" "hello.org" "*Ibuffer*" "hello.org" "learning.org" "hello.org" "le" "hello.org" "custom.el" "hello" "cus" "init-org.el" "in" "learning.org" "/home/liuchibing/.emacs.d/custom.el" "init-org.el" "init-org.el" "init-org.el" "init-org.el" "/home/liuchibing/.emacs.d/custom.el" "*scratch*" "*Customize Apropos*" "*Customize Group: Emacs*" "org-catch-invisible-edits" "/home/liuchibing/org/hello.org" "field.py"))
(setq minibuffer-history '("Network._is_graph_network" "Done" "see here" "hello.org contains some keybindings"))
(setq org-clock-history nil)
(setq org-refile-history nil)
(setq org-tags-history nil)
(setq query-replace-history '("write_to_wav" "generate_wave" "generate_wave" "writeFile" "generateSamples" "createSamples" "prepare_spectrum" "prepareSpect" "prepare_img" "prepareImg"))
(setq read-expression-history '("q" "(after-load 'org (define-key org-mode-map (kbd \"C-c C-p C-p\") 'org-previous-visible-heading))\n" "(define-key org-mode-map (kbd \"C-c C-p o\") 'org-previous-visible-heading)"))
(setq regexp-history nil)
(setq regexp-search-ring nil)
(setq register-alist '((48 . "if opt.verbose:\n        print('input: {}\\noutput: {}\\nwindow width: {}\\nframerate: {}'.format(\n            opt.input_file, opt.output_file,\n    ")))
(setq search-ring nil)
(setq shell-command-history nil)
(setq tags-file-name nil)
(setq tags-table-list nil)

;; Buffer section -- buffers listed in same order as in buffer list:
(desktop-create-buffer 208
  "/home/liuchibing/code/liuchibing.com/_config.yml"
  "_config.yml"
  'yaml-mode
  '(immortal-scratch-mode auto-compile-on-load-mode projectile-mode diff-hl-mode whitespace-cleanup-mode guide-key-mode hes-mode whole-line-or-region-local-mode beacon-mode global-auto-revert-mode company-mode ivy-mode counsel-mode flycheck-mode anzu-mode dimmer-mode goto-address-prog-mode symbol-overlay-mode)
  234
  '(178 nil)
  nil
  nil
  '((indent-tabs-mode) (buffer-file-coding-system . utf-8-unix) (case-fold-search . t))
  '((mark-ring (129 129 142 142 155 177 155 177 215 177 228 244 348 367 420 228))))

